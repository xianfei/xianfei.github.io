[{"content":"前言 国庆的时候，我的一个学弟朋友邀请我参加一次轰趴活动，其实无非就是去喝酒、玩游戏、唱歌、吃饭。最后一项活动就是喝酒了，顺便摇骰子猜点数。具体的规则可以上网上查一下，大概就是这样。\n此次游戏因为我们的骰子数量只有30个，我们有7个人参与此次活动，只够每个人4个骰子。\n概率初步计算 在游戏环节中，我们想过进行概率计算，由于当时在活动现场不适合思考这种问题，于是就简单的得出了“不是很好算”这个结论。不过要回答“什么时候喊开，胜率最大”这个问题，我们还是要用概率去计算。这不，第二天我就在想这个问题，由于本人的数学水平不是很好，所以使用了计算机代码对整个过程进行模拟，结果如下：\n也就是说在这种情况下，对于“5个1”的叫法，“开”他的胜率约为49%；对于“10个x”（1\u0026lt;x\u0026lt;7,x∈N），“开”他的胜率约为54%。\n进一步分析 对于这个游戏，我们再叫骰子之前，可以看一下自己有什么骰子。一般情况下，我们也会根据自己已经有的骰子，来决定我们要叫什么的。于是我们的代码也可以考虑到这一点，即已知部分信息然后计算概率。还是当前的人数和骰子数，假设我知道我现在有了2个1和2个4，那么我叫“12个4”的胜率足足有58%，远远高于不知道任何信息时“12个4”的胜率。\n编写工具 为了方便读者在实战中应用此理论，我根据上述介绍编写了一个小工具，可以计算概率，也可以帮助读者更好的理解本文中的内容。\n源代码：https://github.com/xianfei/xianfei.github.io/blob/master/content/post/dice/dice.html\n结束语 其实吧，喝酒玩骰子就是图一乐，遇到心仪的对象，自己多喝几杯也无妨。\n封面图片：https://unsplash.com/photos/pQyTChJwEDI\n","date":"2022-10-02T00:00:00Z","image":"/p/dice/banner_hu5ac7de94e2cab2249ae730fa84d6c453_316093_120x120_fill_box_smart1_3.png","permalink":"/p/dice/","title":"关于喝酒的时候玩骰子的一些概率计算"},{"content":"完整版毕业论文可在微信公众号Xianfei进行查看。\n目前该项目的英文版论文已被收录至IEEE ISMAR 2022-Adjunct中。\n该项目截至发稿前在Github已获得1.5k Stars，介绍视频在B站获得了2.7万赞及1.1万硬币。\nhttps://github.com/xianfei/SysMocap/\n前言 大学四年转瞬即逝，四年的时光让我学会了许多知识，而毕业设计作为本科期间最后一次自己独立实现自己想做的项目，希望能做一个前沿、有用、有趣的软件，在与指导老师一番沟通后，决定做一个用视频驱动虚拟形象的系统，也就是一个虚拟主播系统，可以选择自己的虚拟形象，并且让虚拟形象跟着自己动。\n当然，这个系统的开发对于我来说是个不小的挑战，它涉及了计算机视觉、计算机图形学、桌面图形界面程序开发、网络通信等知识。而且对于姿态评估及动作捕捉方面的前沿技术之前的学习生活中并没有了解，于是指导老师拿给我了Kinect（一个专门用于动作捕捉的硬件）并且让我了解了一些这方面的开源项目，并且跟我说明了我需要做什么——使用开源的算法获得到的动作数据来驱动虚拟形象的骨骼运动。并且，我也了解到了虚幻引擎、Unity等三维图形引擎的知识。\n技术方案 在开发过程中，研究并对比了多种现有的算法，但是许多算法的运行环境很苛刻，需要专业的计算机配置才能运行。而我希望我做的系统是大家都能用上的，让大家能够体会到科技的乐趣。\n在浏览这方面的开源项目时，突然发现了Google TensorFlow Blog上的一篇文章3D Pose Detection with MediaPipe BlazePose GHUM and TensorFlow.js，其中谈到了一种基于Web技术的3D人体关节点检测方法。诶！Web技术！这不正好提供了非常强大的可移植性和通用行吗！配合之前使用过的Electron框架，能开发出体验一流的跨平台桌面端GUI应用程序。\n当然，更好的是，这个叫做kalidokit项目还给出了源代码，它给出的Pipeline如下图所示：\n于是我就去研究了一下Mediapipe和kalidokit\n创新点 Mediapipe和kalidokit的帮助下已经可以完成毕业设计课题中的一大步了，但是kalidokit自带的demo只能驱动VRM类型的虚拟形象，而面对更常见的fbx、glb/gltf则无从下手。\n同时在实现任务书中的功能之后，我希望能够再加入一些实用的功能和前沿的功能。因为最近虚拟主播很火爆，所以该软件生成的虚拟形象需要实时应用于直播。于是设计了基于HTTP和WebSocket的虚拟形象及动作转发系统，并且为OBS直播软件专门设置了接口，使其可以直接被用于推流到主流平台中。\n但是目前常规的直播都是二维图像直播，在这个元宇宙即将来临的时代，AR/VR/MR（增强现实、虚拟现实与混合现实）必会成为主流趋势，所以我在想能不能定义一种全新的直播方式，可以让用户更为直观的看到对方的虚拟形象呢？于是就设计了基于WebXR技术的虚拟形象直播方案，用户只需要在支持WebXR的设备上访问该系统，即可实时的通过网络在周围环境中查看虚拟形象及其动作。就像科幻电影里面的那样，打开支持AR的手机或带上支持VR/MR的眼镜，虚拟形象就站在你的面前。\n主要来说要做的事情如下：\n使其可以驱动不同类型的虚拟形象\n为其编写一套简单易用好看的GUI\n支持OBS进行直播\n支持AR/VR展示\n难点 使其可以驱动不同类型的虚拟形象 面对这个工作，首先我了解3D模型的骨骼，3D模型之所以能动，是因为他有骨骼，也就是说3D模型有骨骼是能够让他动起来的必要条件。不同的虚拟形象模型，往往有着不同的骨骼结构及命名规则。图中为冰墩墩的骨骼（自己绑定的）和VRM虚拟形象的骨骼（自带的）。\n我们可以发现其骨骼数量是不一样的，其实命名方式也是不一样的，甚至骨骼的坐标系、运动方式都是不一样的，比如下图中三种不同的虚拟形象，做同样的动作时，对坐标的操作是不一样的。\n这或许是迄今为止首个可以支持多种不同虚拟形象格式、不同类型不同骨骼结构的虚拟主播软件。\nAR展示 在写上期的《AR冰墩墩》文章的时候，就是想着在毕设中可以实现AR冰墩墩跟着我做一样的动作。上期用到的\u0026lt;model-viewer\u0026gt;就是基于Three.js开发的，使用WebXR浏览AR内容。但是由于前者是高度封装的，我们想让虚拟形象实时的做指定的动作，需要对虚拟形象骨骼的控制能力。于是就用参考这篇文章编写了WebXR接口。\n这或许是迄今为止首个可以用来AR/VR直播的虚拟主播软件。\nGUI 一个好看的程序就让用户有更多想用的欲望。所以在界面设计上下了许多的功夫，比如采用了自动取色算法进行色彩搭配，比如在添加虚拟形象时的非线性动画，比如在删除虚拟形象时的粒子爆炸效果……\n这或许是迄今为止最好看的跨平台虚拟主播软件。\n结束语 在完成毕设的过程中，学到了许多计算机图形学的知识——比如欧拉角、旋转矩阵、四元数、球面插值等。\n之前我的一个朋友跟我说，她在一个她关注的公众号上看见了对我的毕设的介绍，我一看还真是。\n这篇文章中对我的毕设的评价是“杀疯了”😂\n其实只是想做点儿有趣的事情罢了，当时就在想，我的毕设应该是那种，可能我们班我们专业的换别人就不一定能做出来的东西。\n","date":"2022-08-29T00:00:00Z","image":"/p/bishe/sysmocap_hu556f2aae40812163569276577bc9cdb6_1336970_120x120_fill_box_smart1_3.png","permalink":"/p/bishe/","title":"来聊聊我的本科毕业设计吧"},{"content":" 2021 年 9 月，作为大四的最后一次小组开发课程，我们设计了一个有趣的社交软件——奶黄猫。我在小组中担任产品设计、前端/客户端开发的职位。\n演示视频 视频使用AV1格式编码，请使用 Chrome 70+ / Firefox 67+ / Edge 79+ 浏览器进行播放。See more on here.\n设计想法 在设计这个该社交软件时，由于我们小组都是来自同一个班学同一个专业的程序员，于是我就想到了一个很有意思的想法——将类似于小程序的应用嵌入到动态区域内，来增强可交互性和趣味性。目前的社交软件往往支持在动态除了文字外添加照片、视频、文章超链接等，而我们认为动态的区域应该让用户自由发挥，所以我们设计了可编程动态，支持具有GUI的Web程序和面向入门程序员的CLI程序。\n试想一下，刚上大学的你，学会了C语言，写下属于自己人生中的第一个程序时，那迫不及待想让亲朋好友体验的心情。而这个软件恰好能满足他们！\n待更新 Blog Article 预计添加交互、核心代码等\n接口文档 版本：2021-11-02 ver0.9 by xianfei\n备注 time使用的为Unix时间戳，new Date().getTime()\n动态相关部分 获取动态\nHTTP请求方式：POST\nURL： /moment/getMoments\nPOST Form：\n参数 说明 userID 用户唯一标识符 type 0为广场 1为关注 lastMomentID 上次获取最后一条动态的ID，第一次获取为-1 length 本次获取的动态数 预期返回类型：Json Object\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\n​\t[{\n​\t\u0026ldquo;momentID\u0026rdquo;:当前动态ID,\n​\t\u0026ldquo;userID\u0026rdquo;:用户ID，字符串,\n​\t\u0026ldquo;userName\u0026rdquo;:用户昵称，字符串,\n​\t\u0026ldquo;userAvatar\u0026rdquo;:用户头像，应为图片URL，字符串,\n​\t\u0026ldquo;time\u0026rdquo;:此动态产生时间戳 整型,\n​\t\u0026ldquo;text\u0026rdquo;:动态文字内容,\n​\t\u0026ldquo;appendixType\u0026rdquo;:0无 1图片 2视频 3GUI程序代码段 4CLI程序代码段,\n​\t\u0026ldquo;photos\u0026rdquo;:仅appendixType为1时读取该属性 为含一个或多个图片URL的数组 ,\n​\t\u0026ldquo;video\u0026rdquo;:仅appendixType为2时读取该属性 此项为视频URL ,\n​\t\u0026ldquo;appID\u0026rdquo;:仅appendixType为3/4时读取该属性,\n​\t\u0026ldquo;likedNum\u0026rdquo;:点赞数 整型,\n​\t\u0026ldquo;commentNum\u0026rdquo;:评论数 整型,\n​\t\u0026ldquo;isLiked\u0026rdquo;:当前用户是否点赞了当前动态，Boolean,\n​\t\u0026ldquo;isDel\u0026rdquo;:该动态是否已被删除，Boolean,\n​\t\u0026ldquo;tag\u0026rdquo;:动态标签\n},{\n​\t//同上\n}]\n}\n获取单个动态\nHTTP请求方式：POST\nURL： /moment/getMomentByID\nPOST Form：\n参数 说明 userID 用户唯一标识符 momentID 动态的ID 预期返回类型：Json Object\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\n{\n​\t\u0026ldquo;momentID\u0026rdquo;:当前动态ID,\n​\t\u0026ldquo;userID\u0026rdquo;:用户ID，字符串,\n​\t\u0026ldquo;userName\u0026rdquo;:用户昵称，字符串,\n​\t\u0026ldquo;userAvatar\u0026rdquo;:用户头像，应为图片URL，字符串,\n​\t\u0026ldquo;time\u0026rdquo;:此动态产生时间戳 整型,\n​\t\u0026ldquo;text\u0026rdquo;:动态文字内容,\n​\t\u0026ldquo;appendixType\u0026rdquo;:0无 1图片 2视频 3GUI程序代码段 4CLI程序代码段,\n​\t\u0026ldquo;photos\u0026rdquo;:仅appendixType为1时读取该属性 为含一个或多个图片URL的数组 ,\n​\t\u0026ldquo;video\u0026rdquo;:仅appendixType为2时读取该属性 此项为视频URL ,\n​\t\u0026ldquo;appID\u0026rdquo;:仅appendixType为3/4时读取该属性,\n​\t\u0026ldquo;likedNum\u0026rdquo;:点赞数 整型,\n​\t\u0026ldquo;commentNum\u0026rdquo;:评论数 整型,\n​\t\u0026ldquo;isLiked\u0026rdquo;:当前用户是否点赞了当前动态，Boolean,\n​\t\u0026ldquo;isDel\u0026rdquo;:该动态是否已被删除，Boolean,\n​\t\u0026ldquo;tag\u0026rdquo;:动态标签\n}\n}\n点赞/取消动态（对于已点赞再次点赞为取消）\nHTTP请求方式：POST\nURL： /moment/likeMoment\nPOST Form：\n参数 说明 userID 用户唯一标识符 momentID 点赞的动态 预期返回类型：Json Object\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:{\n​\t\u0026ldquo;isLiked\u0026rdquo;:当前用户是否点赞了当前动态，Boolean,\n​\t\u0026ldquo;likedNum\u0026rdquo;:该动态点赞数\n​\t}\n}\n发送评论\nHTTP请求方式：POST\nURL： /moment/commentMoment\nPOST Form：\n参数 说明 userID 用户唯一标识符 momentID 评论的动态 commentText 评论内容 预期返回类型：Json Object\n{\u0026ldquo;status\u0026rdquo;:0,\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;}\n获取评论\nHTTP请求方式：POST\nURL： /moment/getComment\nPOST Form：\n参数 说明 userID 用户唯一标识符 momentID 动态ID 预期返回类型：Json Array\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:[{\n​\t\u0026ldquo;commentID\u0026rdquo;:评论ID，字符串,\n​\t\u0026ldquo;userID\u0026rdquo;:用户ID，字符串,\n​\t\u0026ldquo;userName\u0026rdquo;:用户昵称，字符串,\n​\t\u0026ldquo;userAvatar\u0026rdquo;:用户头像，应为图片URL，字符串,\n​\t\u0026ldquo;time\u0026rdquo;:此评论产生时间戳 整型,\n​\t\u0026ldquo;text\u0026rdquo;:内容,\n​\t\u0026ldquo;likedNum\u0026rdquo;:点赞数,\n},{\n// 同上\n}]\n}\n获取点赞用户列表\nHTTP请求方式：POST\nURL： /moment/getLikedMomentUsers\nPOST Form：\n参数 说明 userID 用户唯一标识符 momentID 动态ID 预期返回类型：Json Array\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:[{\n​\t\u0026ldquo;userID\u0026rdquo;:用户ID，字符串,\n​\t\u0026ldquo;userName\u0026rdquo;:用户昵称，字符串,\n​\t\u0026ldquo;userAvatar\u0026rdquo;:用户头像，应为图片URL，字符串,\n},{\n// 同上\n}]\n}\n发表纯文本动态\nHTTP请求方式：POST\nURL： /moment/createMomentOnlyText\nPOST Form：\n参数 说明 userID 用户唯一标识符 text 文本内容 tag 标签 预期返回类型：Json Object\n{\u0026ldquo;status\u0026rdquo;:0,\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;}\n发表含图片文本动态\nHTTP请求方式：POST\nURL： /moment/createMomentWithPhotos\nPOST Form：\n参数 说明 userID 用户唯一标识符 text 文本内容 tag 标签 photos 多张图片文件* *参考 https://blog.csdn.net/qq_38310446/article/details/87623991\n预期返回类型：Json Object\n{\u0026ldquo;status\u0026rdquo;:0,\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;}\n发表含视频文本动态\nHTTP请求方式：POST\nURL： /moment/createMomentWithVideo\nPOST Form：\n参数 说明 userID 用户唯一标识符 text 文本内容 tag 标签 video 视频文件 预期返回类型：Json Object\n{\u0026ldquo;status\u0026rdquo;:0,\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;}\n删除评论\nHTTP请求方式：POST\nHTTP请求方式：POST\nURL： /moment/delComment\nPOST Form：\n参数 说明 userID 用户唯一标识符 commentID 点赞的评论 预期返回类型：Json Object\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;\n}\n删除动态\nHTTP请求方式：POST\nURL： /moment/delMoment\nPOST Form：\n参数 说明 userID 用户唯一标识符 momentID 动态ID 预期返回类型：Json Object\n{\u0026ldquo;status\u0026rdquo;:0,\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;}\n获取某用户动态\nHTTP请求方式：POST\nURL： /moment/getUsersMoments\nPOST Form：\n参数 说明 userID 用户唯一标识符 targetUserID 需要获取对方动态的ID lastMomentID 上次获取最后一条动态的ID length 本次获取的动态数 预期返回类型：Json Object\n返回值同 1 获取动态\n获取某类型动态\nHTTP请求方式：POST\nURL： /moment/getTagMoments\nPOST Form：\n参数 说明 userID 用户唯一标识符 tag 希望获取的动态类型 lastMomentID 上次获取最后一条动态的ID length 本次获取的动态数 预期返回类型：Json Object\n返回值同 1 获取动态\n举报动态\nHTTP请求方式：POST\nURL： /moment/reportMoment\nPOST Form：\n参数 说明 userID 用户唯一标识符 momentID 被举报动态ID message 举报理由 预期返回类型：Json Object\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;\n}\n获取CLI程序段\nHTTP请求方式：POST\nURL： /moment/getAppCLI\nPOST Form：\n参数 说明 appID 代码段唯一标识符 {\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:{\n​\t\u0026ldquo;language\u0026rdquo;:编程语言,\n​\t\u0026ldquo;code\u0026rdquo;:程序代码,\n​\t\u0026ldquo;para\u0026rdquo;:保留段,\n​\t}\n}\n发表含CLI程序段文本动态\nHTTP请求方式：POST\nURL： /moment/createMomentWithAppCLI\nPOST Form：\n参数 说明 userID 用户唯一标识符 text 文本内容 tag 标签 language 编程语言 code 程序代码段 para 保留段 预期返回类型：Json Object\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;\n}\n获取GUI程序段\nHTTP请求方式：POST\nURL： /moment/getAppGUI\nPOST Form：\n参数 说明 appID 代码段唯一标识符 {\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:{\n​\t\u0026ldquo;language\u0026rdquo;:编程语言,\n​\t\u0026ldquo;code\u0026rdquo;:程序代码,\n​\t\u0026ldquo;html\u0026rdquo;:HTML代码,\n​\t\u0026ldquo;css\u0026rdquo;:css代码,\n​\t\u0026ldquo;para\u0026rdquo;:保留段,\n​\t}\n}\n发表含GUI程序段文本动态\nHTTP请求方式：POST\nURL： /moment/createMomentWithAppGUI\nPOST Form：\n参数 说明 userID 用户唯一标识符 text 文本内容 tag 标签 language 编程语言 code 程序代码段 html 代码 css 代码 para 保留段 预期返回类型：Json Object\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;\n}\n用户相关 获取某用户信息\nHTTP请求方式：POST\nURL： /user/getUsersInfo\nPOST Form：\n参数 说明 userID 请求的用户ID targetUserID 对方动态ID 预期返回类型：Json Object 对象数组\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:{\n​\t\u0026ldquo;userID\u0026rdquo;:用户ID，字符串,\n​\t\u0026ldquo;userName\u0026rdquo;:用户昵称，字符串,\n​\t\u0026ldquo;userAvatar\u0026rdquo;:用户头像，应为图片URL，字符串,\n​\t\u0026ldquo;follower\u0026rdquo;:粉丝数,\n​\t\u0026ldquo;following\u0026rdquo;:关注数,\n​\t\u0026ldquo;isMale\u0026rdquo;:性别,\n​\t\u0026ldquo;description\u0026rdquo;:个性签名,\n​\t\u0026ldquo;tag\u0026rdquo;:用户喜好标签,\n​\t\u0026ldquo;relationship\u0026rdquo;:0无 1是粉丝 2已关注 3互相关注 ​\t}\n}\n修改用户信息\nHTTP请求方式：POST\nURL： /user/changeUsersInfo\nPOST Form：\n参数 说明 userID 用户唯一标识符 userName 用户昵称 isMale 性别 description 个性签名 tag 用户喜好标签 预期返回类型：Json Object 对象数组\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;\n}\n登录\nHTTP请求方式：POST\nURL： /user/login\nPOST Form：\n参数 说明 user 用户ID/手机号 password 密码 预期返回类型：Json Object 对象数组\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:{\u0026ldquo;userID\u0026rdquo;:用户唯一标识符}\n}\n修改头像\nHTTP请求方式：POST\nURL： /user/changeAvatar\nPOST Form：\n参数 说明 userID 用户ID img 头像 预期返回类型：Json Object 对象数组\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;\n}\n注册\nHTTP请求方式：POST\nURL： /user/register\nPOST Form：\n参数 说明 userID 手机号 password 密码 userName 用户昵称 isMale 性别 预期返回类型：Json Object 对象数组\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:{\u0026ldquo;userID\u0026rdquo;:用户唯一标识符}\n}\n修改密码\nHTTP请求方式：POST\nURL： /user/changePassword\nPOST Form：\n参数 说明 userID 用户ID passwordOld 原密码 passwordNew 新密码 预期返回类型：Json Object 对象数组\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;\n}\n获取粉丝列表\nHTTP请求方式：POST\nURL： /user/getFans\nPOST Form：\n参数 说明 userID 请求的用户ID targetUserID 对方动态ID 预期返回类型：Json Object 对象数组\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:[{\n​\t\u0026ldquo;userID\u0026rdquo;:用户ID，字符串,\n​\t\u0026ldquo;userName\u0026rdquo;:用户昵称，字符串,\n​\t\u0026ldquo;userAvatar\u0026rdquo;:用户头像，应为图片URL，字符串,\n​\t\u0026ldquo;relationship\u0026rdquo;:0无 1是粉丝 2已关注 3互相关注\n​\t},{同上}]\n}\n获取关注列表\nHTTP请求方式：POST\nURL： /user/getFollowers\nPOST Form：\n参数 说明 userID 请求的用户ID targetUserID 对方的ID 预期返回类型：Json Object 对象数组\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:[{\n​\t\u0026ldquo;userID\u0026rdquo;:用户ID，字符串,\n​\t\u0026ldquo;userName\u0026rdquo;:用户昵称，字符串,\n​\t\u0026ldquo;userAvatar\u0026rdquo;:用户头像，应为图片URL，字符串,\n​\t\u0026ldquo;relationship\u0026rdquo;:0无 1是粉丝 2已关注 3互相关注\n​\t}\n​\t,{同上}]\n}\n举报用户\nHTTP请求方式：POST\nURL： /user/reportUser\nPOST Form：\n参数 说明 userID 用户唯一标识符 targetUserID 被举报用户 message 举报理由 预期返回类型：Json Object\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;\n}\n关注用户\nHTTP请求方式：POST\nURL： /user/followUser\nPOST Form：\n参数 说明 userID 用户唯一标识符 targetUserID 被关注用户id 预期返回类型：Json Object\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;\n}\n搜索用户\nHTTP请求方式：POST\nURL： /user/searchUser\nPOST Form：\n参数 说明 userID 请求的用户ID queryUserName 查询的用户名 预期返回类型：Json Object 对象数组\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:[{\n​\t\u0026ldquo;userID\u0026rdquo;:用户ID，字符串,\n​\t\u0026ldquo;userName\u0026rdquo;:用户昵称，字符串,\n​\t\u0026ldquo;userAvatar\u0026rdquo;:用户头像，应为图片URL，字符串,\n​\t\u0026ldquo;relationship\u0026rdquo;:0无 1是粉丝 2已关注 3互相关注\n​\t}\n​\t,{同上}]\n}\n取消关注用户\nHTTP请求方式：POST\nURL： /user/cancelFollowUser\nPOST Form：\n参数 说明 userID 用户唯一标识符 targetUserID 被关注用户id 预期返回类型：Json Object\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:\u0026quot;\u0026quot;\n}\n通知 获取通知\nHTTP请求方式：POST\nURL： /notice/getNotice\nPOST Form：\n参数 说明 userID 请求的用户ID 预期返回类型：Json Object 对象数组\n{\n​\t\u0026ldquo;status\u0026rdquo;:0,\n​\t\u0026ldquo;message\u0026rdquo;:[{\n​\t\u0026ldquo;type\u0026rdquo;:1新粉丝 2评论 3点赞 4系统公告,\n​\t\u0026ldquo;userID\u0026rdquo;:用户ID，字符串，type为4时不检查此属性,\n​\t\u0026ldquo;userName\u0026rdquo;:用户昵称，字符串，type为4时不检查此属性,\n​\t\u0026ldquo;userAvatar\u0026rdquo;:用户头像，应为图片URL，字符串，type为4时不检查此属性,\n​\t\u0026ldquo;note\u0026rdquo;:信息内容,\n​\t\u0026ldquo;momentID\u0026rdquo;:仅type为2或3时使用此值，其余不检测该属性,\n​\t\u0026ldquo;time\u0026rdquo;:当前通知产生时间\n​\t}\n​\t,{同上}]\n}\n聊天 发送消息\n协议：WebSocket 全双工\nURL：/chat\n数据报类型：JSON\n数据报格式：\n{\n​\t\u0026ldquo;formUserID\u0026rdquo;:发送消息的用户ID,\n​\t\u0026ldquo;toUserID\u0026rdquo;:接收消息的用户ID,\n​\t\u0026ldquo;message\u0026rdquo;:消息体\n}\n","date":"2022-07-10T00:00:00Z","image":"/p/nhm/nhm_hue7dded98aae76fa85d959422e4468917_273341_120x120_fill_box_smart1_3.png","permalink":"/p/nhm/","title":"我们设计了一个有趣的社交软件——奶黄猫"},{"content":"什么是 WebAssembly？ WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.\n― webassembly.org WebAssembly 是一种新的编码方式，可以在现代的网络浏览器中运行 － 它是一种低级的类汇编语言，具有紧凑的二进制格式，可以接近原生的性能运行，并为诸如 C / C ++等语言提供一个编译目标，以便它们可以在 Web 上运行。它也被设计为可以与 JavaScript 共存，允许两者一起工作。\n对于网络平台而言，WebAssembly 具有巨大的意义——它提供了一条途径，以使得以各种语言编写的代码都可以以接近原生的速度在 Web 中运行。在这种情况下，以前无法以此方式运行的客户端软件都将可以运行在 Web 中。\nWebAssembly 被设计为可以和 JavaScript 一起协同工作——通过使用 WebAssembly 的 JavaScript API，你可以把 WebAssembly 模块加载到一个 JavaScript 应用中并且在两者之间共享功能。这允许你在同一个应用中利用 WebAssembly 的性能和威力以及 JavaScript 的表达力和灵活性，即使你可能并不知道如何编写 WebAssembly 代码。\n以上三段内容来自 MDN： https://developer.mozilla.org/zh-CN/docs/WebAssembly\n安装编译器 首先我们需要安装一个 WebAssembly 编译器emscripten。对于 macOS 可使用 brew 进行安装\n1 brew install emscripten 测试 emscripten 是否安装成功 此处我们可以运行emcc和emcc --version来测试是否安装成功。\n在 Web 中运行 C 语言代码 C++由于对函数重载、面向对象、名字空间（namespace）等的支持，使得其符号名（mangled symbols）不如 C 语言直观，本文先使用 C 语言进行演示。\n编写 C 代码 下面我们编写一个非常简单的 C 语言例子，它将会返回两数之和，在你所使用的工作目录下，创建一个 test.c 文件。\n1 2 3 4 5 6 7 8 9 10 11 12 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;emscripten/emscripten.h\u0026gt; // 一旦WASM模块被加载，main()中的代码就会执行 int main(int argc, char ** argv) { printf(\u0026#34;WebAssembly module loaded\\n\u0026#34;); } // 返回两数之和 int EMSCRIPTEN_KEEPALIVE get_sum(int a,int b) { return a + b; } 将 C 编译为 WebAssembly 现在我们已经有了 C 代码，接下来需要将它编译成 wasm，不仅如此，我们还需要生成相应的 JavaScript 胶接代码以便能够真正运行起来。\n1 emcc test.c -s WASM=1 -O2 -o index.js 各个参数含义如下：\nemcc——代表 Emscripten 编译器； test.c——包含 C 代码的文件； -s WASM=1——指定使用 WebAssembly； -O2——代码优化级别； -o index.js——指定生成包含 wasm 模块所需的全部胶接代码的 JS 文件； 编译完成后，会生成 index.js 与 index.wasm 文件。\n编写 HTML 代码 在浏览器中处理 WebAssembly 有一个非常强大的 API 可以使用，在此我们不会进行深入探讨因为这已经超出了入门的范畴，我们只需要 Module 接口及其 ccall 方法这部分即可。该方法允许我们通过函数名从 C 代码中调用一个函数，然后就向一般的 JS 函数一样使用就行了。\n1 2 3 4 5 6 var result = Module.ccall( \u0026#34;funcName\u0026#34;, // 函数名 \u0026#34;number\u0026#34;, // 返回类型 [\u0026#34;number\u0026#34;], // 参数类型 [42] ); // 参数 调用此方法之后，result 就将拥有对应 C 函数的所有功能，除函数名以外的所有参数都是可选的。\n我们也可以使用缩写版（使用符号名）：\n1 var result = _funcName(args...); 接着我们需要编写一个 HTML 文件，此处命名为 index.html，包含一个按钮和一个 div 块用来显示结果。\n然后我们添加一个 script 标签用来编写在 JavaScript 中调用 wasm 模块的代码。由于胶接代码的存在（index.js），这项任务变得非常简单，它已经为我们处理好了所有的接线任务。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;WebAssembly 示例\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button id=\u0026#34;run\u0026#34;\u0026gt;执行！\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;result\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 当按钮被点击时，其值将会被改变 var runButton = document.querySelector(\u0026#34;#run\u0026#34;); runButton.addEventListener(\u0026#34;click\u0026#34;, function () { // 调用C代码中的get_sum函数 var result = _get_sum(2, 4); document.querySelector(\u0026#34;#result\u0026#34;).innerText = result; }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 然后访问该网页，此处使用VSCode的Live Server插件进行访问（其他HTTP文件服务器也可以），不能通过直接打开html文件的方式运行（由于CORS本地文件限制）\n那么，C++呢？ 首先，先将上面的代码转换为C++代码，并保存为test.cpp文件。\n1 2 3 4 5 6 7 8 9 10 11 12 #include \u0026lt;iostream\u0026gt; #include \u0026lt;emscripten/emscripten.h\u0026gt; // 一旦WASM模块被加载，main()中的代码就会执行 int main(int argc, char ** argv) { std::cout \u0026lt;\u0026lt; \u0026#34;WebAssembly module loaded\u0026#34; \u0026lt;\u0026lt; std::endl; } // 返回两数之和 int EMSCRIPTEN_KEEPALIVE get_sum(int a,int b) { return a + b; } 然后使用相同的方式进行编译。\n1 emcc test.cpp -s WASM=1 -O2 -o index.js C++有着复杂的Symbol Mangling规则，我们不妨先从标准C++文件进行分析，使用g++编译后使用nm命令分析符号，如下图。\n我们看到，我们所编写的函数符号名为__Z7get_sumii，于是可以使用该符号名调用此函数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;WebAssembly 示例\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button id=\u0026#34;run\u0026#34;\u0026gt;执行！\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;result\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 当按钮被点击时，其值将会被改变 var runButton = document.querySelector(\u0026#34;#run\u0026#34;); runButton.addEventListener(\u0026#34;click\u0026#34;, function () { // 调用C++代码中的get_sum函数 var result = __Z7get_sumii(2, 4); document.querySelector(\u0026#34;#result\u0026#34;).innerText = result; }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 我们通过DevTools查看WebAssembly反汇编代码，也可以证实这一点\n","date":"2022-06-01T00:00:00Z","image":"/p/wasm/wasm_hu9cd79e3bd4f8565d3c544d147212ce46_404011_120x120_fill_box_smart1_3.png","permalink":"/p/wasm/","title":"WebAssembly了解一下！"},{"content":"前言 去年考完研，打算学一学Python要如何调用机器学习的库，之前只会一些Flask的基本操作。\n这是一个基于xyolo库搭建的Web图片目标识别项目，（属于没事儿写着玩地那种），前端使用了纯原生开发（去年写这个东西的时候还不会Vue），后端API部分使用的flask，代码极为简单。\n预览 这里有几张图片，方便大家看一下这个东西最后是个什么效果，图中不同颜色的框框是由前端div绘制，并且识别结果tag也是由html绘制的。在最后还绘制了一个用于显示识别结果和准确率的表格。\n实现 后端代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import numpy from xyolo import YOLO, DefaultYolo3Config from xyolo import init_yolo_v3 from flask import Flask, jsonify, request from flask_cors import CORS from PIL import Image app = Flask(__name__) CORS(app, resources=r\u0026#39;/*\u0026#39;) config = DefaultYolo3Config() init_yolo_v3(config) yolo = YOLO(config) @app.route(\u0026#39;/postimg\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def hello_world(): img = Image.open(request.files[\u0026#39;file\u0026#39;].stream) result = yolo.detect_image(img) print(result) return jsonify({\u0026#39;result\u0026#39;:numpy.array(result).tolist()}) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8808, debug=True) 前端代码 此处偷懒了，都写到html里面了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;让我康康\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; input { margin: 15px; } .myimg { max-height: 100vh; max-width: 100%; margin: auto; } .target-info { color: #f00; padding: 10px; border: solid 3px #f00; } table, th, td { border: 1px solid black; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;让我康康这有什么！\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;支持拖拽图片到这行文字下方\u0026lt;/p\u0026gt; \u0026lt;div id=\u0026#34;dropBox\u0026#34; style=\u0026#34;min-height: 100px; min-height: 100px;\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;target\u0026#34; style=\u0026#34;position:absolute\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;img src=\u0026#34;\u0026#34; id=\u0026#34;myimg\u0026#34; class=\u0026#34;myimg\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input id=\u0026#34;fileInput\u0026#34; type=\u0026#34;file\u0026#34; onchange=\u0026#34;processFiles(this.files)\u0026#34;\u0026gt; \u0026lt;img id=\u0026#34;thumbnail\u0026#34;\u0026gt; \u0026lt;p id=\u0026#34;stat\u0026#34;\u0026gt;就绪\u0026lt;/p\u0026gt; \u0026lt;table id=\u0026#34;restab\u0026#34;\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Object\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Confidence\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;by xianfei 2021.12\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; var dropBox; window.onload = function () { dropBox = document.getElementById(\u0026#34;dropBox\u0026#34;); dropBox.ondragenter = ignoreDrag; dropBox.ondragover = ignoreDrag; dropBox.ondrop = drop; } function ignoreDrag(e) { //因为我们在处理拖放，所以应该确保没有其他元素会取得这个事件 e.stopPropagation(); e.preventDefault(); } function drop(e) { //取消事件传播及默认行为 e.stopPropagation(); e.preventDefault(); //取得拖进来的文件 var data = e.dataTransfer; var files = data.files; //将其传给真正的处理文件的函数 processFiles(files); } function ran() { return Math.floor(Math.random() * 256); } function processFiles(files) { $(\u0026#39;#stat\u0026#39;).html(\u0026#39;正在上传及处理中……\u0026#39;) var file = files[0]; const formData = new FormData(); formData.append(\u0026#39;file\u0026#39;, file) fetch(\u0026#34;/postimg\u0026#34;, { body: formData, method: \u0026#34;post\u0026#34; }).then(res =\u0026gt; { res.json().then(json =\u0026gt; { $(\u0026#39;#stat\u0026#39;).html(\u0026#39;检测到\u0026#39;+json.result.length+\u0026#39;个目标。\u0026#39;) var e = $(\u0026#39;#myimg\u0026#39;) var heightRate = e.height() / e[0].naturalHeight var widthRate = e.width() / e[0].naturalWidth if (json.result.length == 0) $(\u0026#39;#target\u0026#39;).append(\u0026#39;\u0026lt;div style=\u0026#34;position:absolute;width:100px;\u0026#34;\u0026gt;检测失败\u0026lt;/div\u0026gt;\u0026#39;) for (var i of json.result) { var color = \u0026#39;rgb(\u0026#39; + ran() + \u0026#39;,\u0026#39; + ran() + \u0026#39;,\u0026#39; + ran() + \u0026#39;)\u0026#39;; $(\u0026#39;#restab\u0026#39;).append(\u0026#39;\u0026lt;tr style=\u0026#34;color:\u0026#39; + color + \u0026#39;;\u0026#34;\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+i[0]+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+i[2]+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;) $(\u0026#39;#target\u0026#39;).append(\u0026#39;\u0026lt;div style=\u0026#34;position:absolute;margin-left:\u0026#39; + i[3] * widthRate + \u0026#39;px;margin-top:\u0026#39; + i[4] * heightRate + \u0026#39;px;width: \u0026#39; + (i[5] - i[3]) * widthRate + \u0026#39;px;height: \u0026#39; + (i[6] - i[4]) * heightRate + \u0026#39;px;border-color: \u0026#39; + color + \u0026#39;;color:\u0026#39; + color + \u0026#39;;\u0026#34; class=\u0026#34;target-info\u0026#34;\u0026gt;\u0026#39; + i[0] + \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;) } console.log(json) }) }).catch(ex =\u0026gt; { consoleLog(\u0026#34;提交失败:\u0026#34; + ex.toString()); }); var output = document.getElementById(\u0026#34;fileOutput\u0026#34;); //创建FileReader var reader = new FileReader(); //告诉它在准备好数据之后做什么 reader.onload = function (e) { //使用图像URL来绘制dropBox的背景 $(\u0026#39;#myimg\u0026#39;)[0].src = e.target.result; $(\u0026#39;#target\u0026#39;).html(\u0026#39;\u0026#39;) $(\u0026#39;#restab\u0026#39;).html(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Object\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Confidence\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;) }; //读取图片 reader.readAsDataURL(file); } function showFileInput() { var fileInput = document.getElementById(\u0026#34;fileInput\u0026#34;); fileInput.click(); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2022-05-08T00:00:00Z","image":"/p/yolo/banner_hueca99897b332f16a3fd737e22c709ddd_1173106_120x120_fill_box_smart1_3.png","permalink":"/p/yolo/","title":"写一个简简单单的Python后端的Web目标识别网页吧"},{"content":"\n最近，冰墩墩火了！\n随着北京冬奥会开幕\n吉祥物“冰墩墩”一跃成为现象级顶流\n大家不禁纷纷直呼\n“谁不想要一只可爱的冰墩墩！”\n奥林匹克官方旗舰店冰墩墩周边一再售罄\n无论线上还是线下\n都实力演绎“一墩难求”\n技术背景 增强现实（Augmented Reality，简称AR），也有对应VR虚拟实境一词的翻译称为实拟虚境或扩张现实，是指透过摄影机影像的位置及角度精算并加上图像分析技术，让屏幕上的虚拟世界能够与现实世界场景进行结合与交互的技术。这种技术于1990年提出。随着随身电子产品运算能力的提升，增强现实的用途也越来越广。\n效果演示 使用方法 Android：需要一部支持ARCore并安装ARCore的手机 检查ARCore 对于ARCore的支持情况，可查看Google官方对于AR Core的文档（https://developers.google.com/ar/devices），如果自己的设备不支持且装有Magisk框架，可在Magisk中下载ARCore/Playground Patcher来强行支持\n对于MIUI等国产手机，需要在设置中启动Google基础服务，并去小米应用商店更新ARCore。对于默认装有Google服务的手机应该是自带的。\n需要Google应用或最新版的Chrome打开网页 网址：（建议翻墙进行） https://xianfei.github.io/ar2022/\n点击显示网页二维码 将该地址复制到Google应用或Chrome中即可。（iOS用户可以直接访问该链接） 推荐在Google应用中打开效果更好，视频中所展示的是通过系统自带浏览器（不支持WebXR）调用Google APP展示3D AR交互。请Play商店中下载Google应用，否则将会提示如下：\n或者使用Chrome等支持WebXR技术的浏览器进行打开，不过效果不如Google应用。WebXR是一项非常前沿的Web前端技术，浏览器们几乎很少支持\niOS: 直接在Safari中访问网站即可 https://xianfei.github.io/ar2022/\n点击显示网页二维码 点击立方体图标按钮进入AR模式 点击图中右下角的那个图标，即可进入AR模式。\n如果顺利的话，应该可以看见冰墩墩和雪容融了\n酷安头条 昨天凌晨睡觉前把它发到了酷安上，睡醒后发现上了头条，也有很多网友表示成功了，也有些网友提出了一些解决方案，没成功的读者可以在酷安评论区里看看有无有用的内容。\n此处为一些酷安网友在评论区晒的成功截图：\n技术方案 建模：Blender 展示：model-viewer\nAR展示技术可以参考Google ARCore WebXR 文档（ https://developers.google.com/ar/develop/webxr/model-viewer ）简单易懂，对前端开发稍有了解的同学肯定是一看就会。\n此处我们只需导出glb文件即可（如果想要在iOS中也能进行预览则需要导出usdz文件）在Blender完成3D建模后只需要导出glb和usdz文件即可（如果不会建模可以去b站搜一下许多up主分享了模型文件）值得注意的是，玻璃材质等涉及反射折射的材料在AR上不一定能实现，建议使用半透明的实色材质来绘制冰墩墩的外壳\n项目源代码：\nhttps://github.com/xianfei/xianfei.github.io/tree/master/static/ar2022\n","date":"2022-02-09T00:00:00Z","image":"/p/ar2022/ar2022_huf6485039128f9075441ee9cad5d655c0_500386_120x120_fill_box_smart1_3.png","permalink":"/p/ar2022/","title":"AR冰墩墩与雪容融！在家也能和冰墩墩合照啦~"},{"content":" 2021 年或许是平平淡淡的一年，又或许是充满挑战的一年。最近几天打算写一写自己的心得吧，或许也算是对去年的总结，又或是对未来的展望。文笔欠佳，见谅。\n首先来写写 2021 年吧，一转眼就大四了，大四的生活主要是在准备考研，考不考得上也不好说，就在今儿看空卡老师的公众号时看到了一调消息，觉得还挺好笑的。\n说道这里还有一个很好笑的：势态研凉\n好了，言归正传，让我来分享2021都经历了什么有趣的事情吧！\n2021.7 秦皇岛之旅——自驾游 2021的那个暑假，偶然提到了Aranya——秦皇岛的一个很文艺的社区，正好大家也想去海边了，以及想到了自驾游，于是我们就想到了这么一个安排！车还是那辆老车——老捷达，但是这个车别看虽然老，真的是好开，当时是晚上去的走的夜路，开了四个多小时吧开到了北戴河~\n这次出去玩我们订的是民宿，可以自己做饭，自己吃火锅。秦皇岛的物价很便宜，我们在那边有一家很喜欢的冰激凌店——碰碰凉，还有一家炸鸡店，可能是在北京生活习惯了，那边的这些东西物价还不到北京的一半儿而且量大！到了民宿，我们先要规划一下后几天的行程，对于我这样一个学软件工程专业的工科生，电脑当然是必不可少的了！我们第一天用电脑规划行程，后几天就是用电脑看电影了！\n我们决定第一天去Aranya，感受一下文艺气息，第二天去北戴河老虎石，第三天上午逛逛就准备回去了。当晚我们到那儿都很饿，于是就到了那附近的一家大排档撸串！你还别说他家的牛肉穿是真的好吃，比在北京吃的很多餐馆的都要好吃~\n吃完已经快凌晨一点了，于是我们决定——夜里看海！就像《藏起来》歌词“有人相爱，有人夜里开车看海”那样，我们把车开到了海边。这个地方白天是个景区，停车要钱，晚上也就没人管了。\n第二天来到Aranya，这真是一个十分文艺的小镇，建立在海边，可能大家所熟知的就是Aranya教堂了吧，这里借用小米同学的星轨。\n总的而言，在秦皇岛的旅途还是很开心的，也是我第一次自驾游。如果你对此感兴趣可以去看一下我的B站上的Vlog（https://www.bilibili.com/video/av504760418）\n2021.8 妙峰山野营 去秦皇岛是第一次自驾游的话，那么去妙峰山是我第一次自驾野营。其中有一个同学他对这方面很有经验，并且自己有帐篷什么的，我们还带了炭火和羊肉串、鱼豆腐、鸡翅等烧烤食材，可以在野外烧烤~\n同样这次活动也拍了vlog~如果感兴趣可以去看一下（https://www.bilibili.com/video/av717669473）\n2021.5 大创 北邮每年的大创展我都很喜欢，也是我每年必去的活动，在这里可以看到许多同学很有意思的想法，和他们交流技术，思维的碰撞之间或许能产生不一样的火花！\n2021.4 舞会 其实我是被叫来当摄影拍拍照的，平时在学校团委、青媒等学生组织当新闻摄影报道学校活动，而这次舞会不是官方活动所以我可以拍拍照顺便参与一下，感谢北邮舞协的朋友们教我如何跳舞！\n兴趣爱好——摄影 最早喜欢摄影是从高中开始，当时其实主要就是为了拍学校的一些活动（当时在学校电视台工作），之后大学也因为之前拍过不错的作品而在军训加入摄影宣传组（文体宣）而不用训练，在2021年也拍了许多自己满意的照片，还是像以前一样以人像摄影及校园活动为主。大家可以访问本站的摄影作品展（https://xianfei.ml:8001/gallery/）来观看哦~\n兴趣爱好——美食制作 俗话说得好，民以食为天，而好吃的食物，能使人在心情不好时感到治愈。其实我甚至向往以后的生活：开一个小饭馆，饭点儿做做菜迎接一些客人，而不是饭点儿的时候接一些外包项目写写代码赚一些小钱。感觉这样生活应该也不会太累也不会太穷。\n编程 我的专业是软件工程，所以编程应该也算是我的本行了，在暑假感谢于崔Sir的安排让我体验了一把打工人的生活，去工作了几天，帮忙完成一个小项目，用C++写一些大项目中涉及到的算法并进行测试，工资是每天一千块钱。这也算第一次去上班挣钱了吧~\n如果研究生没考上的话，之后也就是要去就业了，或者边工作边准备明年再考一年？不过无论到时候是不是在工作，还要保持学习的热情及对新知识的渴望。之前老师经常说，学会以后把所学的给其他人讲出来，会加深你对知识的理解，所以我决定在b站分享一些实用的编程技术。目前在做的是速成全栈工程师，做一个提问箱的系统，目前已经上传完第一集，第二集已经录完正在剪辑了，欢迎大家去看一下以及给个三连关注什么的！（https://www.bilibili.com/video/av808225151）\n人际交往 人际关系是困扰人类的永恒课题，人的烦恼绝大多数都是周围人带来的。人际交往的本质就是“社会认可战”，综合运用精神、物质、情感认可才是获胜的最佳策略。让你我都有良好的感觉，或者说是过得开心才是最重要的，俗话说得好“和气生财”，往往老板聊得来就可能会让你多多光顾一家店。最近看老梁讲的《如何练就令人拍案叫绝的现场反应》，讲的很是好，他还推出过情商课，这些在YouTube上能看到。我在本站搬运了一份，《如何练就令人拍案叫绝的现场反应》，讲的十分好，两个小时，强烈推荐大家能把他看完。（https://xianfei.ml:8001/?p=460，不支持iOS设备）\n2021-2022 元旦跨年 2022的元旦，和同学们到北京城里的胡同（东四那边）玩了玩，最近很喜欢许多奇奇怪怪而又没什么用的好玩的东西，生活嘛，应该充满仪式感。\n2022 2022，希望生活能够更好，希望开开心心，希望世界和平，希望考研上岸。\n年初去打卡了著名的地铁上岸站，正好芽芽同学就住在门头沟，顺便让她当个导游了，也祝她能考研上岸！\n突然想到明年就毕业了，希望疫情能够好转，能有一个更好的毕业旅行吧！如果有什么好的想法，欢迎在评论区留言！\n","date":"2022-01-27T00:00:00Z","image":"/p/my2021/clay-banks-HyczMwZbdLg-unsplash_hub4793d9bcd0c763f6c3c447eae921687_1203292_120x120_fill_q75_box_smart1.jpg","permalink":"/p/my2021/","title":"2021年度总结\u0026杂谈"},{"content":" 【释义】从目前的形势和状态分析，这次考研要凉。\n【例句】如今～，只好准备二战了。\n成语：\n释义： 从目前的形势和状态分析，这次考研要凉。 例句： 如今～，只好准备二战了。 本文是交互式Blog，请尝试改变上方输入框中的文字！\n","date":"2022-01-12T00:00:00Z","image":"/p/%E6%88%90%E8%AF%AD%E7%94%9F%E6%88%90%E5%99%A8/banner_huf1e48fbcfb498bd1e6f5485ca95ebe62_255681_120x120_fill_box_smart1_3.png","permalink":"/p/%E6%88%90%E8%AF%AD%E7%94%9F%E6%88%90%E5%99%A8/","title":"成语生成器"},{"content":"功能介绍 利用TCP/IP协议的局域网文件传输工具，通过ip地址及自定义的端口号进行连接。\n运行环境 通过测试的运行环境：macOS Mojave 10.14 \u0026amp; Fedora Linux Workstation 29\n依赖的软件包：dialog（图形库，需自己安装）、netcat(nc，用于对TCP/UDP进行读写，这两个系统自带)、net-tools（ifconfig，用于配置和显示Linux内核中网络接口，这两个系统自带）\nDialog安装方法：\nmacOS：使用brew包管理器安装。必要时请提供superuser权限。 在终端中输入以下命令\nbrew安装命令：（如果安装过请跳过这一步） /usr/bin/ruby -e \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026quot;\n使用brew包管理器安装命令： brew install dialog\nfedora: 使用yum包管理器安装。 在终端中输入以下命令\nsudo yum install dialog\n运行截图 源代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 #!/bin/bash send() { dialog --inputbox \u0026#34;请将文件拖到这里，或者输入绝对路径\u0026#34; 20 50 2\u0026gt; temp if [ $? != 0 ] then return 6 fi fileAddr=`cat temp` fileName=`echo ${fileAddr##*/}` dialog --inputbox \u0026#34;请输入您想使用的端口号\u0026#34; 20 50 2\u0026gt; temp if [ $? != 0 ] then return 6 fi sendPort=`cat temp` dialog --inputbox \u0026#34;请输入接收方的ip地址\u0026#34; 20 50 2\u0026gt; temp if [ $? != 0 ] then return 6 fi recvIP=`cat temp` dialog --title 正在发送 --infobox \u0026#34;正在发送文件$fileName \u0026#34; 20 50 echo $fileName | nc $recvIP $sendPort if [ $? != 0 ] then dialog --colors --msgbox \u0026#34;\\Z1 发送错误！请检查端口号及IP地址！\u0026#34; 0 0 return 6 fi sleep 1 nc $recvIP $sendPort \u0026lt; $fileAddr if [ $? != 0 ] then dialog --colors --msgbox \u0026#34;\\Z1 发送错误！\u0026#34; 0 0 return 6 fi fileSize=`ls -lh $fileAddr | awk \u0026#39;{print $5}\u0026#39;` dialog --msgbox \u0026#34;发送完成。\\n文件名：$fileName \\n大小：${fileSize}\u0026#34; 20 50 } recv() { dialog --inputbox \u0026#34;请输入您想使用的端口号\u0026#34; 20 50 2\u0026gt; temp if [ $? != 0 ] then return 6 fi recvPort=`cat temp` dialog --title \u0026#34;请选择接收路径\u0026#34; --fselect \u0026#34;${HOME}/\u0026#34; 8 50 2\u0026gt; temp if [ $? != 0 ] then return 6 fi recvAddr=`cat temp` localIP=`ifconfig | grep \u0026#34;inet\u0026#34; | awk \u0026#39;{ print $2}\u0026#39; | grep -v \u0026#34;127.0.0.1\u0026#34; | grep -v \u0026#34;:\u0026#34;` dialog --title 等待接受 --infobox \u0026#34;本机IP：$localIP \\n端口号：$recvPort\u0026#34; 20 50 nc -l $recvPort \u0026gt; temp if [ $? != 0 ] then dialog --colors --msgbox \u0026#34;\\Z1 接收错误！\u0026#34; 0 0 return 6 fi recvFile=`cat temp` dialog --infobox \u0026#34;正在接收文件 $recvFile ……\u0026#34; 20 50 nc -l $recvPort \u0026gt; filetemp if [ $? != 0 ] then dialog --colors --msgbox \u0026#34;\\Z1 接收错误！\u0026#34; 0 0 return 6 fi mv filetemp ${recvAddr}/${recvFile} fileSize=`ls -lh ${recvAddr}/${recvFile} | awk \u0026#39;{print $5}\u0026#39;` dialog --msgbox \u0026#34;接收完成。\\n文件名：$recvFile \\n大小：${fileSize}\u0026#34; 20 50 } mainUI() { dialog --cancel-label 退出 --title Shell文件传输助手 --menu \u0026#34; \\n \u0026#34; 20 50 8 1 \u0026#34;发送文件\u0026#34; 2 \u0026#34;接收文件\u0026#34; 3 \u0026#34;关于\u0026#34; 4 \u0026#34;退出\u0026#34; 2\u0026gt; temp a1=`cat temp` case $a1 in 1) send if [ $? = 6 ] then mainUI fi ;; 2) recv if [ $? = 6 ] then mainUI fi ;; 3) dialog --colors --msgbox \u0026#34;Shell文件传输助手 \\n\\nBeta Version 2019.3.5\\n\\n\\Z6开发人员：\\n王衔飞 李思涵 胡嘉慧 丁玲\u0026#34; 20 50 mainUI ;; 4) return ;; esac } mainUI clear rm -f temp rm -f filetemp ","date":"2019-03-05T00:00:00Z","image":"/p/shell-file-trans/1_huf95364caf60a3b9d7580a3cfd70ebe86_78402_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"/p/shell-file-trans/","title":"Shell File Transfer —— 适用于Linux/macOS的局域网文件传输程序"},{"content":"前言 一个基于C语言的多平台控制台扫雷软件，可以实现Windows系统自带小游戏扫雷的所有功能。实现了自定义游戏参数、第一次不会踩到雷、挖雷、标记、自动处理无雷区域、一定条件下快速挖开周围区域的功能。控制台版本使用操作命令+行列坐标方式实现。\n流程图 源代码include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; //设定为挖开和已标记填充的字符 #define undigged \u0026#34;▣\u0026#34; #define marked \u0026#34;∅\u0026#34; //行列数及雷数 unsigned int row = 16; unsigned int col = 30; unsigned int minenum = 9; //随机造雷函数 int makemine(int mine[32][32]) { int a[minenum]; //用于保存雷的位置 int i, j; for (i = 1; i \u0026lt; row + 1; i++) { for (j = 1; j \u0026lt; col + 1; j++) { mine[i][j] = 0;//遍历清空 用于第一次踩到雷重新造雷用 } } srand((int) time(0)); a[0] = rand() % (row * col); for (i = 1; i \u0026lt; minenum; i++) { a[i] = rand() % (row * col); for (j = 0; j \u0026lt; i; j++) { if (a[i] == a[j]) i--; } } for (i = 0; i \u0026lt; minenum; i++) { //将前面产生的雷的位置写入到数组中 int x = a[i] / col + 1; int y = a[i] % col + 1; mine[x][y] = 1; } return 0; } //输出雷盘 int output(char show[31][31][4]) { int i, j; for (i = 1; i \u0026lt; row + 1; i++) { printf(\u0026#34;%3d \u0026#34;, i); for (j = 1; j \u0026lt; col + 1; j++) { printf(\u0026#34;%s \u0026#34;, show[i][j]); } putchar(\u0026#39;\\n\u0026#39;); } return 0; } //计算x,y周围的雷数 int scanmine(int mine[32][32], int x, int y) { int n = 0, i, j; for (i = 1; i \u0026gt; -2; i--) { for (j = 1; j \u0026gt; -2; j--) { if (mine[x + i][y + j] == 1)n++; } } return n; } //用于自动打开没有雷的区域 void chuli0(char show[31][31][4], int mine[32][32]) { int x, y, i, j; for (x = 1; x \u0026lt; row + 1; x++) { for (y = 1; y \u0026lt; col + 1; y++) { if (show[x][y][0] == \u0026#39; \u0026#39;) { for (i = 1; i \u0026gt; -2; i--) { for (j = 1; j \u0026gt; -2; j--) { if (scanmine(mine, x + i, y + j)) show[x + i][y + j][0] = \u0026#39;0\u0026#39; + scanmine(mine, x + i, y + j); else show[x + i][y + j][0] = \u0026#39; \u0026#39;; show[x + i][y + j][1] = 0; } } } } } } //计算剩余未挖开地方的数 int least(char show[31][31][4]) { int i, j, n = 0; for (i = 1; i \u0026lt; row + 1; i++) { for (j = 1; j \u0026lt; col + 1; j++) { if (!(strcmp(show[i][j], undigged)))n++; if (!(strcmp(show[i][j], marked)))n++; } } return n; } //执行游戏 int game(char show[31][31][4], int mine[32][32],int flag[31][31]){ while(getchar() != \u0026#39;\\n\u0026#39;);//清除键盘缓冲区 int i = 0, j = 0, k = 0, x, y; static int flagnum = 0; printf(\u0026#34;未挖开：%d \u0026#34;, least(show)); printf(\u0026#34;剩余雷：%d \u0026#34;, minenum - flagnum); printf(\u0026#34;已标记：%d\\n\u0026#34;, flagnum); printf(\u0026#34; \u0026#34;); for (i = 0; i \u0026lt; col; i++)printf(\u0026#34;%c \u0026#34;, i + \u0026#39;a\u0026#39;); putchar(\u0026#39;\\n\u0026#39;); output(show); puts(\u0026#34;\\n请输入操作和列号行号:(操作：d挖开,f标记/取消标记,o尝试打开四周)\u0026#34;); int opt = getchar(); y = getchar() - \u0026#39;a\u0026#39; + 1; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); //printf(\u0026#34;%d--%d\u0026#34;,x,y); if(x\u0026lt;1||x\u0026gt;row||y\u0026lt;1||y\u0026gt;row){ puts(\u0026#34;error\u0026#34;); puts(\u0026#34;\\n\\n\\n\u0026#34;); return 1;//查错语句 } switch (opt) { case \u0026#39;d\u0026#39;: if (flag[x][y]) { puts(\u0026#34;\\n\\n\u0026#34;); printf(\u0026#34;该处已被标记，请取消后重试！！！\u0026#34;); puts(\u0026#34;\\n\u0026#34;); break; } else { if (mine[x][y] \u0026amp;\u0026amp; (least(show) != col * row)) { printf(\u0026#34;你炸了！！！\u0026#34;); return 0; } if (mine[x][y] \u0026amp;\u0026amp; (least(show) == col * row)) { do { makemine(mine); }//防止第一次踩到雷 while (mine[x][y]); } if (!mine[x][y]) { if (scanmine(mine, x, y)) show[x][y][0] = \u0026#39;0\u0026#39; + scanmine(mine, x, y); else show[x][y][0] = \u0026#39; \u0026#39;; show[x][y][1] = 0; if (!(scanmine(mine, x, y))) { for (k = 0; k \u0026lt; (col \u0026gt; row ? col : row); k++)chuli0(show, mine); } puts(\u0026#34;\\n\\n\\n\u0026#34;); break; } } case \u0026#39;f\u0026#39;: flag[x][y] = !flag[x][y]; if (flag[x][y]) { strcpy(show[x][y], marked); flagnum++; } else { strcpy(show[x][y], undigged); flagnum--; } puts(\u0026#34;\\n\\n\\n\u0026#34;); break; case \u0026#39;o\u0026#39;: k = 0; for (i = 1; i \u0026gt; -2; i--) { for (j = 1; j \u0026gt; -2; j--) { if (!(strcmp(show[x + i][y + j], marked)))k++; } } if (k != scanmine(mine, x, y)) { puts(\u0026#34;\\n\\n\u0026#34;); puts(\u0026#34;无法快速打开，周围未全部标记\u0026#34;); puts(\u0026#34;\\n\u0026#34;); break; } for (i = 1; i \u0026gt; -2; i--) { for (j = 1; j \u0026gt; -2; j--) { if (!(strcmp(show[x + i][y + j], undigged))) { if (scanmine(mine, x + i, y + j)) show[x + i][y + j][0] = \u0026#39;0\u0026#39; + scanmine(mine, x + i, y + j); else show[x + i][y + j][0] = \u0026#39; \u0026#39;; show[x + i][y + j][1] = 0; if (!(scanmine(mine, x + i, y + j))) { for (k = 0; k \u0026lt; (col \u0026gt; row ? col : row); k++)chuli0(show, mine); } } } } puts(\u0026#34;\\n\\n\\n\u0026#34;); break; default: puts(\u0026#34;error\u0026#34;); puts(\u0026#34;\\n\\n\\n\u0026#34;); } if (least(show) == minenum) { printf(\u0026#34;你赢了！！！\u0026#34;); return 0; } return 1; } //选择难度 int choose(){ puts(\u0026#34;请选择难度：\u0026#34;); puts(\u0026#34;1.初级 9x9 10个雷\u0026#34;); puts(\u0026#34;2.中级 16x16 40个雷\u0026#34;); puts(\u0026#34;3.高级 16x30 99个雷\u0026#34;); puts(\u0026#34;4.自定义\u0026#34;); printf(\u0026#34;请输入序号：\u0026#34;); switch (getchar()) { case \u0026#39;1\u0026#39;: minenum = 10; row = 9; col = 9; break; case \u0026#39;2\u0026#39;: minenum = 40; row = 16; col = 16; break; case \u0026#39;3\u0026#39;: minenum = 99; row = 16; col = 30; break; case \u0026#39;4\u0026#39;: puts(\u0026#34;请输入行数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;row); puts(\u0026#34;请输入列数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;col); puts(\u0026#34;请输入雷数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;minenum); if (row \u0026gt; 24 || col \u0026gt; 30 || minenum \u0026gt; 0.9 * col * row) { puts(\u0026#34;行数不能大于24，列数不能大于30\u0026#34;); puts(\u0026#34;雷数不能大于方格数的90%\u0026#34;); while(getchar() != \u0026#39;\\n\u0026#39;);//清除键盘缓冲区 return 1; } break; default: puts(\u0026#34;error\u0026#34;); while(getchar() != \u0026#39;\\n\u0026#39;);//清除键盘缓冲区 return 1; } return 0; } int main() { while(choose());//选择游戏难度，如果正确选择返回值应为0 int mine[32][32] = {0}, flag[31][31] = {0},i,j; makemine(mine);//造雷 putchar(\u0026#39;\\n\u0026#39;); char show[30 + 1][30 + 1][4] = {0};//用于储存雷盘显示的字符串 在macos/linux上特殊符号占用3byte for (i = 1; i \u0026lt; row + 1; i++) { for (j = 1; j \u0026lt; col + 1; j++) { strcpy(show[i][j], undigged);//初始化雷盘 } } while (game(show,mine,flag));//执行游戏 游戏结束时返回值应为0 return 0; } ","date":"2019-01-11T00:00:00Z","image":"/p/minesweeper-cli/cta_hu5d6229566403b571e354b7e8d7d45994_52875_120x120_fill_box_smart1_3.png","permalink":"/p/minesweeper-cli/","title":"扫雷 Command Line Version with C"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2000-03-11T00:00:00Z","image":"/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]