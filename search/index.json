[{"content":"Hello World in Hugo Hi! I\u0026rsquo;m xianfei. I\u0026rsquo;m a student in the Department of Computer Science and Software Engineering, Beijing Information Science \u0026amp; Technology University (BISTU).\n","date":"2022-06-29T00:00:00Z","image":"/p/hello-world-in-hugo/banner_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"/p/hello-world-in-hugo/","title":"Hello World in Hugo"},{"content":" 【释义】从目前的形势和状态分析，这次考研要凉。\n【例句】如今～，只好准备二战了。\n成语：\n释义： 从目前的形势和状态分析，这次考研要凉。 例句： 如今～，只好准备二战了。 本文是交互式Blog，请尝试改变上方输入框中的文字！\n","date":"2022-01-12T00:00:00Z","image":"/p/%E6%88%90%E8%AF%AD%E7%94%9F%E6%88%90%E5%99%A8/banner_huf1e48fbcfb498bd1e6f5485ca95ebe62_255681_120x120_fill_box_smart1_3.png","permalink":"/p/%E6%88%90%E8%AF%AD%E7%94%9F%E6%88%90%E5%99%A8/","title":"成语生成器"},{"content":"功能介绍 利用TCP/IP协议的局域网文件传输工具，通过ip地址及自定义的端口号进行连接。\n运行环境 通过测试的运行环境：macOS Mojave 10.14 \u0026amp; Fedora Linux Workstation 29\n依赖的软件包：dialog（图形库，需自己安装）、netcat(nc，用于对TCP/UDP进行读写，这两个系统自带)、net-tools（ifconfig，用于配置和显示Linux内核中网络接口，这两个系统自带）\nDialog安装方法：\nmacOS：使用brew包管理器安装。必要时请提供superuser权限。 在终端中输入以下命令\nbrew安装命令：（如果安装过请跳过这一步） /usr/bin/ruby -e \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026quot;\n使用brew包管理器安装命令： brew install dialog\nfedora: 使用yum包管理器安装。 在终端中输入以下命令\nsudo yum install dialog\n运行截图 源代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 #!/bin/bash send() { dialog --inputbox \u0026#34;请将文件拖到这里，或者输入绝对路径\u0026#34; 20 50 2\u0026gt; temp if [ $? != 0 ] then return 6 fi fileAddr=`cat temp` fileName=`echo ${fileAddr##*/}` dialog --inputbox \u0026#34;请输入您想使用的端口号\u0026#34; 20 50 2\u0026gt; temp if [ $? != 0 ] then return 6 fi sendPort=`cat temp` dialog --inputbox \u0026#34;请输入接收方的ip地址\u0026#34; 20 50 2\u0026gt; temp if [ $? != 0 ] then return 6 fi recvIP=`cat temp` dialog --title 正在发送 --infobox \u0026#34;正在发送文件$fileName \u0026#34; 20 50 echo $fileName | nc $recvIP $sendPort if [ $? != 0 ] then dialog --colors --msgbox \u0026#34;\\Z1 发送错误！请检查端口号及IP地址！\u0026#34; 0 0 return 6 fi sleep 1 nc $recvIP $sendPort \u0026lt; $fileAddr if [ $? != 0 ] then dialog --colors --msgbox \u0026#34;\\Z1 发送错误！\u0026#34; 0 0 return 6 fi fileSize=`ls -lh $fileAddr | awk \u0026#39;{print $5}\u0026#39;` dialog --msgbox \u0026#34;发送完成。\\n文件名：$fileName \\n大小：${fileSize}\u0026#34; 20 50 } recv() { dialog --inputbox \u0026#34;请输入您想使用的端口号\u0026#34; 20 50 2\u0026gt; temp if [ $? != 0 ] then return 6 fi recvPort=`cat temp` dialog --title \u0026#34;请选择接收路径\u0026#34; --fselect \u0026#34;${HOME}/\u0026#34; 8 50 2\u0026gt; temp if [ $? != 0 ] then return 6 fi recvAddr=`cat temp` localIP=`ifconfig | grep \u0026#34;inet\u0026#34; | awk \u0026#39;{ print $2}\u0026#39; | grep -v \u0026#34;127.0.0.1\u0026#34; | grep -v \u0026#34;:\u0026#34;` dialog --title 等待接受 --infobox \u0026#34;本机IP：$localIP \\n端口号：$recvPort\u0026#34; 20 50 nc -l $recvPort \u0026gt; temp if [ $? != 0 ] then dialog --colors --msgbox \u0026#34;\\Z1 接收错误！\u0026#34; 0 0 return 6 fi recvFile=`cat temp` dialog --infobox \u0026#34;正在接收文件 $recvFile ……\u0026#34; 20 50 nc -l $recvPort \u0026gt; filetemp if [ $? != 0 ] then dialog --colors --msgbox \u0026#34;\\Z1 接收错误！\u0026#34; 0 0 return 6 fi mv filetemp ${recvAddr}/${recvFile} fileSize=`ls -lh ${recvAddr}/${recvFile} | awk \u0026#39;{print $5}\u0026#39;` dialog --msgbox \u0026#34;接收完成。\\n文件名：$recvFile \\n大小：${fileSize}\u0026#34; 20 50 } mainUI() { dialog --cancel-label 退出 --title Shell文件传输助手 --menu \u0026#34; \\n \u0026#34; 20 50 8 1 \u0026#34;发送文件\u0026#34; 2 \u0026#34;接收文件\u0026#34; 3 \u0026#34;关于\u0026#34; 4 \u0026#34;退出\u0026#34; 2\u0026gt; temp a1=`cat temp` case $a1 in 1) send if [ $? = 6 ] then mainUI fi ;; 2) recv if [ $? = 6 ] then mainUI fi ;; 3) dialog --colors --msgbox \u0026#34;Shell文件传输助手 \\n\\nBeta Version 2019.3.5\\n\\n\\Z6开发人员：\\n王衔飞 李思涵 胡嘉慧 丁玲\u0026#34; 20 50 mainUI ;; 4) return ;; esac } mainUI clear rm -f temp rm -f filetemp ","date":"2019-03-05T00:00:00Z","image":"/p/shell-file-trans/1_huf95364caf60a3b9d7580a3cfd70ebe86_78402_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"/p/shell-file-trans/","title":"Shell File Transfer —— 适用于Linux/macOS的局域网文件传输程序"},{"content":"前言 一个基于C语言的多平台控制台扫雷软件，可以实现Windows系统自带小游戏扫雷的所有功能。实现了自定义游戏参数、第一次不会踩到雷、挖雷、标记、自动处理无雷区域、一定条件下快速挖开周围区域的功能。控制台版本使用操作命令+行列坐标方式实现。\n流程图 源代码include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; //设定为挖开和已标记填充的字符 #define undigged \u0026#34;▣\u0026#34; #define marked \u0026#34;∅\u0026#34; //行列数及雷数 unsigned int row = 16; unsigned int col = 30; unsigned int minenum = 9; //随机造雷函数 int makemine(int mine[32][32]) { int a[minenum]; //用于保存雷的位置 int i, j; for (i = 1; i \u0026lt; row + 1; i++) { for (j = 1; j \u0026lt; col + 1; j++) { mine[i][j] = 0;//遍历清空 用于第一次踩到雷重新造雷用 } } srand((int) time(0)); a[0] = rand() % (row * col); for (i = 1; i \u0026lt; minenum; i++) { a[i] = rand() % (row * col); for (j = 0; j \u0026lt; i; j++) { if (a[i] == a[j]) i--; } } for (i = 0; i \u0026lt; minenum; i++) { //将前面产生的雷的位置写入到数组中 int x = a[i] / col + 1; int y = a[i] % col + 1; mine[x][y] = 1; } return 0; } //输出雷盘 int output(char show[31][31][4]) { int i, j; for (i = 1; i \u0026lt; row + 1; i++) { printf(\u0026#34;%3d \u0026#34;, i); for (j = 1; j \u0026lt; col + 1; j++) { printf(\u0026#34;%s \u0026#34;, show[i][j]); } putchar(\u0026#39;\\n\u0026#39;); } return 0; } //计算x,y周围的雷数 int scanmine(int mine[32][32], int x, int y) { int n = 0, i, j; for (i = 1; i \u0026gt; -2; i--) { for (j = 1; j \u0026gt; -2; j--) { if (mine[x + i][y + j] == 1)n++; } } return n; } //用于自动打开没有雷的区域 void chuli0(char show[31][31][4], int mine[32][32]) { int x, y, i, j; for (x = 1; x \u0026lt; row + 1; x++) { for (y = 1; y \u0026lt; col + 1; y++) { if (show[x][y][0] == \u0026#39; \u0026#39;) { for (i = 1; i \u0026gt; -2; i--) { for (j = 1; j \u0026gt; -2; j--) { if (scanmine(mine, x + i, y + j)) show[x + i][y + j][0] = \u0026#39;0\u0026#39; + scanmine(mine, x + i, y + j); else show[x + i][y + j][0] = \u0026#39; \u0026#39;; show[x + i][y + j][1] = 0; } } } } } } //计算剩余未挖开地方的数 int least(char show[31][31][4]) { int i, j, n = 0; for (i = 1; i \u0026lt; row + 1; i++) { for (j = 1; j \u0026lt; col + 1; j++) { if (!(strcmp(show[i][j], undigged)))n++; if (!(strcmp(show[i][j], marked)))n++; } } return n; } //执行游戏 int game(char show[31][31][4], int mine[32][32],int flag[31][31]){ while(getchar() != \u0026#39;\\n\u0026#39;);//清除键盘缓冲区 int i = 0, j = 0, k = 0, x, y; static int flagnum = 0; printf(\u0026#34;未挖开：%d \u0026#34;, least(show)); printf(\u0026#34;剩余雷：%d \u0026#34;, minenum - flagnum); printf(\u0026#34;已标记：%d\\n\u0026#34;, flagnum); printf(\u0026#34; \u0026#34;); for (i = 0; i \u0026lt; col; i++)printf(\u0026#34;%c \u0026#34;, i + \u0026#39;a\u0026#39;); putchar(\u0026#39;\\n\u0026#39;); output(show); puts(\u0026#34;\\n请输入操作和列号行号:(操作：d挖开,f标记/取消标记,o尝试打开四周)\u0026#34;); int opt = getchar(); y = getchar() - \u0026#39;a\u0026#39; + 1; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); //printf(\u0026#34;%d--%d\u0026#34;,x,y); if(x\u0026lt;1||x\u0026gt;row||y\u0026lt;1||y\u0026gt;row){ puts(\u0026#34;error\u0026#34;); puts(\u0026#34;\\n\\n\\n\u0026#34;); return 1;//查错语句 } switch (opt) { case \u0026#39;d\u0026#39;: if (flag[x][y]) { puts(\u0026#34;\\n\\n\u0026#34;); printf(\u0026#34;该处已被标记，请取消后重试！！！\u0026#34;); puts(\u0026#34;\\n\u0026#34;); break; } else { if (mine[x][y] \u0026amp;\u0026amp; (least(show) != col * row)) { printf(\u0026#34;你炸了！！！\u0026#34;); return 0; } if (mine[x][y] \u0026amp;\u0026amp; (least(show) == col * row)) { do { makemine(mine); }//防止第一次踩到雷 while (mine[x][y]); } if (!mine[x][y]) { if (scanmine(mine, x, y)) show[x][y][0] = \u0026#39;0\u0026#39; + scanmine(mine, x, y); else show[x][y][0] = \u0026#39; \u0026#39;; show[x][y][1] = 0; if (!(scanmine(mine, x, y))) { for (k = 0; k \u0026lt; (col \u0026gt; row ? col : row); k++)chuli0(show, mine); } puts(\u0026#34;\\n\\n\\n\u0026#34;); break; } } case \u0026#39;f\u0026#39;: flag[x][y] = !flag[x][y]; if (flag[x][y]) { strcpy(show[x][y], marked); flagnum++; } else { strcpy(show[x][y], undigged); flagnum--; } puts(\u0026#34;\\n\\n\\n\u0026#34;); break; case \u0026#39;o\u0026#39;: k = 0; for (i = 1; i \u0026gt; -2; i--) { for (j = 1; j \u0026gt; -2; j--) { if (!(strcmp(show[x + i][y + j], marked)))k++; } } if (k != scanmine(mine, x, y)) { puts(\u0026#34;\\n\\n\u0026#34;); puts(\u0026#34;无法快速打开，周围未全部标记\u0026#34;); puts(\u0026#34;\\n\u0026#34;); break; } for (i = 1; i \u0026gt; -2; i--) { for (j = 1; j \u0026gt; -2; j--) { if (!(strcmp(show[x + i][y + j], undigged))) { if (scanmine(mine, x + i, y + j)) show[x + i][y + j][0] = \u0026#39;0\u0026#39; + scanmine(mine, x + i, y + j); else show[x + i][y + j][0] = \u0026#39; \u0026#39;; show[x + i][y + j][1] = 0; if (!(scanmine(mine, x + i, y + j))) { for (k = 0; k \u0026lt; (col \u0026gt; row ? col : row); k++)chuli0(show, mine); } } } } puts(\u0026#34;\\n\\n\\n\u0026#34;); break; default: puts(\u0026#34;error\u0026#34;); puts(\u0026#34;\\n\\n\\n\u0026#34;); } if (least(show) == minenum) { printf(\u0026#34;你赢了！！！\u0026#34;); return 0; } return 1; } //选择难度 int choose(){ puts(\u0026#34;请选择难度：\u0026#34;); puts(\u0026#34;1.初级 9x9 10个雷\u0026#34;); puts(\u0026#34;2.中级 16x16 40个雷\u0026#34;); puts(\u0026#34;3.高级 16x30 99个雷\u0026#34;); puts(\u0026#34;4.自定义\u0026#34;); printf(\u0026#34;请输入序号：\u0026#34;); switch (getchar()) { case \u0026#39;1\u0026#39;: minenum = 10; row = 9; col = 9; break; case \u0026#39;2\u0026#39;: minenum = 40; row = 16; col = 16; break; case \u0026#39;3\u0026#39;: minenum = 99; row = 16; col = 30; break; case \u0026#39;4\u0026#39;: puts(\u0026#34;请输入行数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;row); puts(\u0026#34;请输入列数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;col); puts(\u0026#34;请输入雷数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;minenum); if (row \u0026gt; 24 || col \u0026gt; 30 || minenum \u0026gt; 0.9 * col * row) { puts(\u0026#34;行数不能大于24，列数不能大于30\u0026#34;); puts(\u0026#34;雷数不能大于方格数的90%\u0026#34;); while(getchar() != \u0026#39;\\n\u0026#39;);//清除键盘缓冲区 return 1; } break; default: puts(\u0026#34;error\u0026#34;); while(getchar() != \u0026#39;\\n\u0026#39;);//清除键盘缓冲区 return 1; } return 0; } int main() { while(choose());//选择游戏难度，如果正确选择返回值应为0 int mine[32][32] = {0}, flag[31][31] = {0},i,j; makemine(mine);//造雷 putchar(\u0026#39;\\n\u0026#39;); char show[30 + 1][30 + 1][4] = {0};//用于储存雷盘显示的字符串 在macos/linux上特殊符号占用3byte for (i = 1; i \u0026lt; row + 1; i++) { for (j = 1; j \u0026lt; col + 1; j++) { strcpy(show[i][j], undigged);//初始化雷盘 } } while (game(show,mine,flag));//执行游戏 游戏结束时返回值应为0 return 0; } ","date":"2019-01-11T00:00:00Z","image":"/p/minesweeper-cli/cta_hu5d6229566403b571e354b7e8d7d45994_52875_120x120_fill_box_smart1_3.png","permalink":"/p/minesweeper-cli/","title":"扫雷 Command Line Version with C"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2000-09-09T00:00:00Z","image":"/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2000-03-11T00:00:00Z","image":"/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2000-03-10T00:00:00Z","permalink":"/p/rich-content/","title":"Rich Content"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2000-03-08T00:00:00Z","permalink":"/p/math-typesetting/","title":"Math Typesetting"}]